{"version":3,"sources":["reportWebVitals.ts","features/user/userReducer.ts","redux/rootReducer.ts","redux/store.ts","index.tsx","features/user/UserProfile.tsx","App.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","userSlice","createSlice","name","initialState","username","reducers","login","state","action","payload","actions","rootReducer","combineReducers","store","configureStore","reducer","App","require","default","ReactDOM","render","StrictMode","document","getElementById","StyledForm","styled","main","attrs","className","UserProfile","useSelector","type","placeholder","path","component"],"mappings":"+KAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,cCCRQ,EAAYC,YAAY,CAC5BC,KAAM,OACNC,aAN8B,CAC5BC,SAAU,SAMZC,SAAU,CACRC,MADQ,SACFC,EAAOC,GAAqC,IACxCJ,EAAaI,EAAOC,QAApBL,SACRG,EAAMH,SAAWA,MASRJ,GAFXA,EAAUU,QADVJ,MAGWN,EAAf,SClBeW,EAJKC,YAAgB,CAACZ,cCiBtBa,MAdDC,YAAe,CAC3BC,QAASJ,I,eCCI,WACb,IAAMK,EAAMC,EAAQ,IAASC,QAE7BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAACG,EAAD,QAGJM,SAASC,eAAe,SAI5BH,GAeA7B,K,wQC7BA,IAAMiC,E,MAAaC,EAAOC,KAAKC,MAAM,CACnCC,UAAW,kEADMH,CAAH,m/BAgBD,SAASI,IAA6B,IAC3CzB,EAAa0B,aAAY,SAACvB,GAAD,OAAsBA,EAAMP,aAArDI,SAER,OAAO,6CACMA,EACX,cAACoB,EAAD,UACE,iCACE,uBAAOO,KAAK,OAAOC,YAAY,cAC/B,uBAAOD,KAAK,OAAOC,YAAY,UAC/B,uBAAOD,KAAK,OAAOC,YAAY,aAC/B,qDCtBOhB,UAPH,kBAEV,cAAC,IAAD,UACE,cAAC,IAAD,CAAOiB,KAAK,IAAIC,UAAWL,S","file":"static/js/main.ee9c8980.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\ninterface UserDetails {\n    username: string\n}\n\nlet initialState: UserDetails = {\n    username: \"Tommy\",\n}\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    login(state, action: PayloadAction<UserDetails>) {\n      const { username } = action.payload\n      state.username = username\n    },\n  }\n})\n\nexport const {\n    login,\n} = userSlice.actions\n\nexport default userSlice.reducer","import { combineReducers } from '@reduxjs/toolkit'\nimport userSlice from '../features/user/userReducer'\n\nconst rootReducer = combineReducers({userSlice})\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer","///<reference types=\"webpack-env\" />\n\nimport { Action, configureStore, ThunkAction } from '@reduxjs/toolkit'\n\nimport rootReducer, { RootState } from './rootReducer'\n\nconst store = configureStore({\n  reducer: rootReducer\n})\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default\n    store.replaceReducer(newRootReducer)\n  })\n}\n\nexport type AppDispatch = typeof store.dispatch\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport store from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport \"./assets/styles.css\"\n\nconst render = () => {\n  const App = require(\"./App\").default;\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  );\n};\n\nrender()\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nif (process.env.NODE_ENV === \"development\" && module.hot) {\n  module.hot.accept(\"./App\", render);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React, { ReactElement } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { RootState } from \"../../redux/rootReducer\";\n\nimport styled from \"styled-components\"\nimport tw from \"twin.macro\"\n\nconst StyledForm = styled.main.attrs({\n  className: \"flex flex-col h-screen justify-center items-center bg-gray-100\",\n})`\n  & {\n    form {\n      ${tw`bg-white text-center rounded py-8 px-5 shadow max-w-xs`}\n    }\n    input {\n      ${tw`border-gray-300 mb-4 w-full border-solid border rounded py-2 px-4`}\n    }\n    button {\n      ${tw`bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 border border-blue-700 rounded`}\n    }\n  }\n`\n\nexport default function UserProfile(): ReactElement {\n  const { username } = useSelector((state: RootState) => state.userSlice);\n\n  return <div>\n    User is = {username}\n    <StyledForm>\n      <form>\n        <input type=\"text\" placeholder=\"Full name\" />\n        <input type=\"text\" placeholder=\"Email\" />\n        <input type=\"text\" placeholder=\"Password\" />\n        <button>Sign In</button>\n      </form>\n    </StyledForm>\n  </div>;\n\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport UserProfile from \"./features/user/UserProfile\";\n\nconst App = () => (\n\n  <Router>\n    <Route path=\"/\" component={UserProfile} />\n  </Router>\n);\n\nexport default App;\n"],"sourceRoot":""}